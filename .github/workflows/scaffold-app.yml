name: Scaffold Node.js App

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: "Name of the app"
        required: true
      repo_name:
        description: "Slug of the app"
        required: true
      template:
        description: "Template to use for the app"
        required: false
        default: "nodejs"
      description:
        description: "Description of the app"
        required: true
        default: "A simple app"
      port_payload:
        required: true
        description: "Port's payload (who triggered, context, etc...)"
        type: string

env:
  GITHUB_USERNAME: ${{ github.repository_owner }}
  AWS_REGION: us-east-1

jobs:
  scaffold_app:
    permissions:
      contents: read
      packages: write
      id-token: write
    runs-on: ubuntu-latest     
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch Secrets from Akeyless
        id: fetch-akeyless-secrets
        uses: akeyless-community/akeyless-github-action@v1.1.1
        with:
          access-id: ${{ vars.AKEYLESS_ACCESS_ID }}
          access-type: jwt
          static-secrets: |
            - name: "/Workshops/Akeyless-Port-1/${{ env.GITHUB_USERNAME }}/port/creds"
              output-name: "PORT_CREDS"
            - name: "/Workshops/Akeyless-Port-1/${{ env.GITHUB_USERNAME }}/github/pat"
              output-name: "PERSONAL_ACCESS_TOKEN"
          dynamic-secrets: |
            - name: "/Workshops/Akeyless-Port-1/${{ env.GITHUB_USERNAME }}/AWS-Dynamic"
              output-name: "aws_dynamic_secret"
        continue-on-error: true

      - name: Check Akeyless Secrets Fetch Status
        run: |
          if [ "${{ steps.fetch-akeyless-secrets.outcome }}" == "failure" ]; then
            echo "::error::Failed to fetch secrets from Akeyless"
            echo "Debugging information:"
            echo "GitHub Username: ${{ env.GITHUB_USERNAME }}"
            echo "Access ID: ${{ vars.AKEYLESS_ACCESS_ID }}"
            exit 1
          fi

      - name: Put Port and GitHub PAT Credentials into Environment Variables
        run: |
          if [ -z "${{ steps.fetch-akeyless-secrets.outputs.PORT_CREDS }}" ]; then
            echo "::error::PORT_CREDS is empty"
            exit 1
          fi
          
          if [ -z "${{ steps.fetch-akeyless-secrets.outputs.PERSONAL_ACCESS_TOKEN }}" ]; then
            echo "::error::PERSONAL_ACCESS_TOKEN is empty"
            exit 1
          fi
          
          # Extract PAT value from JSON
          ACTUAL_PAT=$(echo '${{ steps.fetch-akeyless-secrets.outputs.PERSONAL_ACCESS_TOKEN }}' | jq -r '.pat')
          
          # Debug PAT (length only, for security)
          PAT_LENGTH=$(echo -n "$ACTUAL_PAT" | wc -c)
          echo "PAT length: $PAT_LENGTH"
          
          # Debug first and last few characters of PAT (safely)
          echo "PAT starts with: ${ACTUAL_PAT:0:4}..."
          echo "PAT ends with: ...${ACTUAL_PAT: -4}"
          
          # Debug PORT_CREDS
          echo "PORT_CREDS format: $(echo '${{ steps.fetch-akeyless-secrets.outputs.PORT_CREDS }}' | jq -r 'type')"
          
          # Remove any potential whitespace and ensure proper JSON formatting
          CLEANED_CREDS=$(echo '${{ steps.fetch-akeyless-secrets.outputs.PORT_CREDS }}' | tr -d '[:space:]')
          
          # Extract values with error checking
          CLIENT_ID=$(echo "$CLEANED_CREDS" | jq -r '.client_id // empty')
          CLIENT_SECRET=$(echo "$CLEANED_CREDS" | jq -r '.client_secret // empty')
          
          if [ -z "$CLIENT_ID" ] || [ -z "$CLIENT_SECRET" ]; then
            echo "::error::Failed to parse client_id or client_secret from credentials"
            exit 1
          fi
          
          # Set environment variables
          echo "PORT_CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
          echo "PORT_CLIENT_SECRET=$CLIENT_SECRET" >> $GITHUB_ENV
          echo "PERSONAL_ACCESS_TOKEN=$ACTUAL_PAT" >> $GITHUB_ENV
          
          # Test PAT with a simple API call (with verbose output)
          echo "Testing GitHub API access..."
          HTTP_RESPONSE=$(curl -s -v \
            -H "Authorization: Bearer $ACTUAL_PAT" \
            https://api.github.com/user 2>&1)
          HTTP_STATUS=$(echo "$HTTP_RESPONSE" | grep "< HTTP" | awk '{print $3}')
          echo "GitHub API test status: $HTTP_STATUS"
          echo "API Response Headers:"
          echo "$HTTP_RESPONSE" | grep "< " || true
          
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "::error::GitHub PAT validation failed with status $HTTP_STATUS"
            exit 1
          fi

      - name: Export AWS Creds to Environment
        run: |
          echo '${{ steps.fetch-akeyless-secrets.outputs.aws_dynamic_secret }}' | jq -r 'to_entries|map("AWS_\(.key|ascii_upcase)=\(.value|tostring)")|.[]' >> $GITHUB_ENV

      # Setup AWS CLI
      - name: Configure AWS Credentials
        run: |
          # env | grep -i aws
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }}
          sleep 30 # Wait for AWS to assign IAM permissions to the credentials

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create a log message (post-action)
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ env.PORT_CLIENT_ID }}
          clientSecret: ${{ env.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_payload).context.runId}}
          logMessage: "Starting scaffolding of app: ${{ github.event.inputs.project_name }}"

      - name: Check if Repository Exists
        id: check_repo
        run: |
          REPO_EXISTS=$(curl -s -o /dev/null -w "%{http_code}" \
            -X GET \
            -H "Authorization: Bearer ${{ env.PERSONAL_ACCESS_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.event.inputs.repo_name }}")
           
          echo "HTTP Status: $REPO_EXISTS"

          if [ $REPO_EXISTS -eq 200 ]; then
            echo "Repository already exists."
            echo "repo_exists=true" >> $GITHUB_ENV
          else
            echo "Repository does not exist."
            echo "repo_exists=false" >> $GITHUB_ENV
          fi

      - name: Create a log message (post-action)
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ env.PORT_CLIENT_ID }}
          clientSecret: ${{ env.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_payload).context.runId}}
          logMessage: "Creating ECR repository: ${{ github.event.inputs.repo_name }}"

      - name: Create ECR Repository
        id: create-ecr-repo
        run: |
          repositoryUri=$(aws ecr create-repository --repository-name "${{ github.event.inputs.repo_name }}" --output json | jq -r '.repository.repositoryUri')
          echo "ECR_REPOSITORY_URI=$repositoryUri" >> $GITHUB_ENV

      - name: Run Cookiecutter
        id: cookiecutter
        uses: andrewthetechie/gha-cookiecutter@main
        with:
          # path to what you checked out
          template: ./app-templates/${{ github.event.inputs.template }}
          outputDir: ./tmp
          cookiecutterValues: '{
            "project_name": "${{ github.event.inputs.project_name }}",
            "directory_name": "${{ github.event.inputs.repo_name }}",
            "description": "${{ github.event.inputs.description }}",
            "author_name": "Port",
            "github_username": "${{ github.repository_owner }}",
            "image_repository": "${{ env.ECR_REPOSITORY_URI }}"
            }'

      - name: Create a log message (post-action)
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ env.PORT_CLIENT_ID }}
          clientSecret: ${{ env.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_payload).context.runId}}
          logMessage: "Creating repository for app: ${{ github.event.inputs.project_name }}"

      - name: Create GitHub Repository
        id: create-repo
        if: ${{ env.repo_exists == 'false' }}
        run: |
          # Add quotes around the JSON data and escape the inner quotes
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ env.PERSONAL_ACCESS_TOKEN }}" \
            -d "{\"name\": \"${{ github.event.inputs.repo_name }}\", \"private\": true, \"description\": \"${{ github.event.inputs.description }}\"}" \
            "https://api.github.com/user/repos")
          
          echo "HTTP Status: $HTTP_STATUS"
          
          if [ $HTTP_STATUS -eq 201 ]; then
            echo "Repository created successfully."
          else
            echo "Failed to create repository. HTTP Status: $HTTP_STATUS"
            exit 1
          fi

      - name: Create a log message (post-action)
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ env.PORT_CLIENT_ID }}
          clientSecret: ${{ env.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{fromJson(inputs.port_payload).context.runId}}
          logMessage: "Commiting new app files: ${{ github.event.inputs.project_name }}"

      - name: Commit files
        working-directory: ./tmp/${{ github.event.inputs.repo_name }}
        run: |
          sudo chmod -R 777 .
          git init
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git add .
          git commit -m "Initial commit"
          git branch -M main
          git remote add origin https://${{ github.repository_owner }}:${{ env.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository_owner }}/${{ github.event.inputs.repo_name }}.git
          git push -u origin main

      - name: Create a log message (post-action)
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ env.PORT_CLIENT_ID }}
          clientSecret: ${{ env.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          status: "SUCCESS"
          runId: ${{fromJson(inputs.port_payload).context.runId}}
          logMessage: "Finished scaffolding of app: ${{ github.event.inputs.project_name }}"
