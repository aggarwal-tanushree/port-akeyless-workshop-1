name: Build and Deploy Image to EKS

on:
  workflow_dispatch:
    inputs:
      cluster:
        description: 'Deployment cluster'
        required: true
      repo_url:
        description: 'Repository URL'
        required: true
      port_payload:
        required: true
        description: "Port's payload, including details for who triggered the action and general context (blueprint, run id, etc...)"
        type: string

env:
  REPO_URL: ${{ github.event.inputs.repo_url  }} 
  TRIGGERED_BY: ${{ fromJson(inputs.port_payload).trigger.by.user.email || github.actor }}
  AWS_REGION: us-east-1
  GITHUB_ACTIONS_ROLE_ARN: "arn:aws:iam::047709130171:role/github-actions-eks-role"
  GITHUB_USERNAME: ${{ github.repository_owner }}

jobs:
  build_deploy_app:
    permissions:
      contents: read
      packages: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
    - name: Extract repository owner and name
      run: |
        echo "REPO_URL=${REPO_URL}"
        echo "Cluster=${{ github.event.inputs.cluster  }} "
        repo_owner=$(echo "${REPO_URL}" | awk -F/ '{print $4}')
        repo_name=$(echo "${REPO_URL}" | awk -F/ '{print $5}')

        echo "REPO_OWNER=$repo_owner" >> $GITHUB_ENV
        echo "REPO_NAME=$repo_name" >> $GITHUB_ENV
      shell: bash

    - name: Fetch Secrets from Akeyless
      id: fetch-akeyless-secrets
      uses: akeyless-community/akeyless-github-action@v1.1.1
      with:
        access-id: ${{ vars.AKEYLESS_ACCESS_ID }}
        access-type: jwt
        static-secrets: |
          - name: "/Workshops/Akeyless-Port-1/${{ env.GITHUB_USERNAME }}/port/creds"
            output-name: "PORT_CREDS"
          - name: "/Workshops/Akeyless-Port-1/${{ env.GITHUB_USERNAME }}/github/pat"
            output-name: "PERSONAL_ACCESS_TOKEN"
        dynamic-secrets: |
          - name: "/Workshops/Akeyless-Port-1/${{ env.GITHUB_USERNAME }}/AWS-Dynamic"
            output-name: "aws_dynamic_secret"
      continue-on-error: true

    - name: Check Akeyless Secrets Fetch Status
      run: |
        if [ "${{ steps.fetch-akeyless-secrets.outcome }}" == "failure" ]; then
          echo "::error::Failed to fetch secrets from Akeyless"
          echo "Debugging information:"
          echo "GitHub Username: ${{ env.GITHUB_USERNAME }}"
          echo "Access ID: ${{ vars.AKEYLESS_ACCESS_ID }}"
          exit 1
        fi

    - name: Put Port and GitHub PAT Credentials into Environment Variables
      run: |
        if [ -z "${{ steps.fetch-akeyless-secrets.outputs.PORT_CREDS }}" ]; then
          echo "::error::PORT_CREDS is empty"
          exit 1
        fi
        
        if [ -z "${{ steps.fetch-akeyless-secrets.outputs.PERSONAL_ACCESS_TOKEN }}" ]; then
          echo "::error::PERSONAL_ACCESS_TOKEN is empty"
          exit 1
        fi
        
        # Extract PAT value from JSON
        ACTUAL_PAT=$(echo '${{ steps.fetch-akeyless-secrets.outputs.PERSONAL_ACCESS_TOKEN }}' | jq -r '.pat')
        
        # Debug PAT (length only, for security)
        PAT_LENGTH=$(echo -n "$ACTUAL_PAT" | wc -c)
        echo "PAT length: $PAT_LENGTH"
        
        # Debug first and last few characters of PAT (safely)
        echo "PAT starts with: ${ACTUAL_PAT:0:4}..."
        echo "PAT ends with: ...${ACTUAL_PAT: -4}"
        
        # Debug PORT_CREDS
        echo "PORT_CREDS format: $(echo '${{ steps.fetch-akeyless-secrets.outputs.PORT_CREDS }}' | jq -r 'type')"
        
        # Remove any potential whitespace and ensure proper JSON formatting
        CLEANED_CREDS=$(echo '${{ steps.fetch-akeyless-secrets.outputs.PORT_CREDS }}' | tr -d '[:space:]')
        
        # Extract values with error checking
        CLIENT_ID=$(echo "$CLEANED_CREDS" | jq -r '.client_id // empty')
        CLIENT_SECRET=$(echo "$CLEANED_CREDS" | jq -r '.client_secret // empty')
        
        if [ -z "$CLIENT_ID" ] || [ -z "$CLIENT_SECRET" ]; then
          echo "::error::Failed to parse client_id or client_secret from credentials"
          exit 1
        fi
        
        # Set environment variables
        echo "PORT_CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
        echo "PORT_CLIENT_SECRET=$CLIENT_SECRET" >> $GITHUB_ENV
        echo "PERSONAL_ACCESS_TOKEN=$ACTUAL_PAT" >> $GITHUB_ENV
        
        # Test PAT with a simple API call (with verbose output)
        echo "Testing GitHub API access..."
        HTTP_RESPONSE=$(curl -s -v \
          -H "Authorization: Bearer $ACTUAL_PAT" \
          https://api.github.com/user 2>&1)
        HTTP_STATUS=$(echo "$HTTP_RESPONSE" | grep "< HTTP" | awk '{print $3}')
        echo "GitHub API test status: $HTTP_STATUS"
        echo "API Response Headers:"
        echo "$HTTP_RESPONSE" | grep "< " || true
        
        if [ "$HTTP_STATUS" != "200" ]; then
          echo "::error::GitHub PAT validation failed with status $HTTP_STATUS"
          exit 1
        fi

    - name: Export AWS Creds to Environment
      run: |
        echo '${{ steps.fetch-akeyless-secrets.outputs.aws_dynamic_secret }}' | jq -r 'to_entries|map("AWS_\(.key|ascii_upcase)=\(.value|tostring)")|.[]' >> $GITHUB_ENV

    # Setup AWS CLI
    - name: Configure AWS Credentials
      run: |
        # env | grep -i aws
        aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }}
        sleep 30 # Wait for AWS to assign IAM permissions to the credentials


    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: ${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}
        token: ${{ env.PERSONAL_ACCESS_TOKEN }}

    - name: Get short commit ID
      id: get-commit-id
      run: |
        echo "COMMIT_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        echo "COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
      shell: bash

    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.REPO_NAME }}
      run: |
        # Build and push image with short commit ID and triggered by as tags
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHORT .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHORT

        # Tag image with commit ID and push
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHORT $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHA
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHA

        # Tag image with triggered by and push
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHORT $ECR_REGISTRY/$ECR_REPOSITORY:actor-${TRIGGERED_BY//[^a-zA-Z0-9]/-}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:actor-${TRIGGERED_BY//[^a-zA-Z0-9]/-}

        # Tag image with PR ID and push
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          PR_ID=$(echo "${{ github.event.pull_request.number }}" | tr -d '/')
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHORT $ECR_REGISTRY/$ECR_REPOSITORY:pr-$PR_ID
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:pr-$PR_ID
        fi

        # Tag image with workflow ID and push
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHORT $ECR_REGISTRY/$ECR_REPOSITORY:build-${{ github.run_id }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:build-${{ github.run_id }}
        
        # Tag image with latest and push
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHORT $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Notify Port
      uses: port-labs/port-github-action@v1
      with:
        clientId: ${{ env.PORT_CLIENT_ID }}
        clientSecret: ${{ env.PORT_CLIENT_SECRET }}
        operation: PATCH_RUN
        baseUrl: https://api.getport.io
        runId: ${{ fromJson(inputs.port_payload).context.runId }}
        logMessage: |
          Built and pushed image to ECR

    - name: Extract cluster name and region from arn
      run: |
        cluster_arn=$(echo "${{ github.event.inputs.cluster }}" | awk -F/ '{print $NF}')
        cluster_name=$(echo "${cluster_arn}" | awk -F: '{print $NF}')
        cluster_region=$(echo "${{ github.event.inputs.cluster }}" | awk -F: '{print $4}')

        echo "CLUSTER_NAME=$cluster_name" >> $GITHUB_ENV
        echo "CLUSTER_REGION=$cluster_region" >> $GITHUB_ENV

    - name: Deploy to EKS
      run: |
        aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.CLUSTER_REGION }} --role-arn ${{ env.GITHUB_ACTIONS_ROLE_ARN }}
        kubectl apply -f manifests/deployment.yml
        kubectl apply -f manifests/service.yml

    - name: Notify Port
      uses: port-labs/port-github-action@v1
      with:
        clientId: ${{ env.PORT_CLIENT_ID }}
        clientSecret: ${{ env.PORT_CLIENT_SECRET }}
        operation: PATCH_RUN
        baseUrl: https://api.getport.io
        runId: ${{ fromJson(inputs.port_payload).context.runId }}
        logMessage: |
            Deployed to EKS 
